openapi: 3.0.3
info:
  title: Social MVP API
  version: 1.0.0
servers:
  - url: /
paths:
  /healthz:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/login:
    post:
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: JWT issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        '401': { description: Unauthorized }
  /posts:
    get:
      summary: List posts
      responses:
        '200':
          description: Posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create post (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title: { type: string }
                content: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /posts/{id}:
    get:
      summary: Get post
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404': { description: Not Found }
    put:
      summary: Update post (admin)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title: { type: string }
                content: { type: string }
      responses:
        '200': { description: Updated }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
    delete:
      summary: Delete post (admin)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /users:
    get:
      summary: List users (admin)
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create user (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
                is_admin: { type: boolean }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /feeds:
    get:
      summary: List feeds
      responses:
        '200':
          description: Feeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feed'
    post:
      summary: Create feed (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
  /feeds/{id}:
    delete:
      summary: Delete feed (admin)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Deleted }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        content: { type: string }
        source: { type: string, nullable: true }
        published_at: { type: string, format: date-time, nullable: true }
        created_at: { type: string, format: date-time }
    User:
      type: object
      properties:
        id: { type: integer }
        email: { type: string }
        is_admin: { type: boolean }
        created_at: { type: string, format: date-time }
    Feed:
      type: object
      properties:
        id: { type: integer }
        url: { type: string }
        enabled: { type: boolean }
        created_at: { type: string, format: date-time }